-- programs ------------------------------------------------

entrypoints 	Program ;

Program.	Program ::= [TopDef] ;

FnDef.		TopDef ::= Type Ident "(" [Arg] ")" Block ;

separator 	nonempty TopDef "" ;

Arg.		Arg ::= Type Ident;

separator	Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator	Stmt "" ;

Empty.		Stmt ::= ";" ;

Decl.		Stmt ::= Type [Item] ";" ;

NoInit.		Item ::= Ident ; 

Init.		Item ::= Ident "=" Expr ;

separator 	nonempty Item "," ;

Ass.       	Stmt ::= Ident "=" Expr  ";" ;

ArrAss.     Stmt ::= Ident "[" Expr "]" "=" Expr  ";" ;

Incr.      	Stmt ::= Ident "++"  ";" ;

Decr.     	Stmt ::= Ident "--"  ";" ;

Ret.       	Stmt ::= "return" Expr ";" ;

VRet.      	Stmt ::= "return" ";" ;

Cond.      	Stmt ::= "if" "(" Expr ")" Block  ;

CondElse.  	Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

While.     	Stmt ::= "while" "(" Expr ")" Block ;

For.		Stmt ::= "for" "(" Ident ":=" Expr "to" Expr ")" Block;

SExp.      	Stmt ::= Expr  ";" ;

BreakExp.	Stmt ::= "break" ";" ;

ContExp.	Stmt ::= "continue" ";" ;

Print.		Stmt ::= "print" "(" Expr ")";

Printf.		Stmt ::= "printf" "(" Expr "," Expr "," Expr "," String ")";

Input.      Stmt ::= "scan" "(" Ident ")" ;

-- Types ---------------------------------------------------

Int.       	Type ::= "int" ;

Str.       	Type ::= "string" ;

Bool.      	Type ::= "boolean" ;

Void.      	Type ::= "void" ;

Tuple.		Type ::= "tuple" "<" [Type] ">";

Array.		Type ::= Type "[]"; 

internal  	Fun. Type ::= Type "(" [Type] ")" ;

separator  	Type "," ;

-- Expressions ---------------------------------------------

ETuple.	    Expr6 ::= "?" [Expr] "?";

EArr.		Expr6 ::= "[" [Expr] "]";

EArrIdx.    Expr6 ::= Expr6 "[" Expr "]";

EVar.      	Expr6 ::= Ident ;

ELitInt.   	Expr6 ::= Integer ;

ELitTrue. 	Expr6 ::= "true" ;

ELitFalse. 	Expr6 ::= "false" ;

EApp.      	Expr6 ::= Ident "(" [Expr] ")" ;

EString.   	Expr6 ::= String ;

Neg.       	Expr5 ::= "-" Expr6 ;

Not.       	Expr5 ::= "!" Expr6 ;

EMul.      	Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      	Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      	Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      	Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       	Expr ::= Expr1 "||" Expr ;

coercions  	Expr 6 ;

separator 	Expr "," ;

-- operators -----------------------------------------------

Plus.      	AddOp ::= "+" ;

Minus.     	AddOp ::= "-" ;

Times.     	MulOp ::= "*" ;

Div.      	MulOp ::= "/" ;

Mod.       	MulOp ::= "%" ;

LTH.       	RelOp ::= "<" ;

LE.        	RelOp ::= "<=" ;

GTH.       	RelOp ::= ">" ;

GE.        	RelOp ::= ">=" ;

EQU.       	RelOp ::= "==" ;

NE.        	RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    	"#" ;

comment  	"//" ;

comment   	 "/*" "*/" ;