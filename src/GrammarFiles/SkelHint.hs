-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelHint where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsHint

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsHint.Ident -> Result
transIdent x = case x of
  AbsHint.Ident string -> failure x

transProgram :: Show a => AbsHint.Program' a -> Result
transProgram x = case x of
  AbsHint.Program _ topdefs -> failure x

transTopDef :: Show a => AbsHint.TopDef' a -> Result
transTopDef x = case x of
  AbsHint.FnDef _ type_ ident args block -> failure x

transArg :: Show a => AbsHint.Arg' a -> Result
transArg x = case x of
  AbsHint.Arg _ type_ ident -> failure x

transBlock :: Show a => AbsHint.Block' a -> Result
transBlock x = case x of
  AbsHint.Block _ stmts -> failure x

transStmt :: Show a => AbsHint.Stmt' a -> Result
transStmt x = case x of
  AbsHint.Empty _ -> failure x
  AbsHint.Decl _ type_ items -> failure x
  AbsHint.Ass _ ident expr -> failure x
  AbsHint.ArrAss _ ident expr1 expr2 -> failure x
  AbsHint.Incr _ ident -> failure x
  AbsHint.Decr _ ident -> failure x
  AbsHint.Ret _ expr -> failure x
  AbsHint.VRet _ -> failure x
  AbsHint.Cond _ expr block -> failure x
  AbsHint.CondElse _ expr block1 block2 -> failure x
  AbsHint.While _ expr block -> failure x
  AbsHint.For _ ident expr1 expr2 block -> failure x
  AbsHint.SExp _ expr -> failure x
  AbsHint.BreakExp _ -> failure x
  AbsHint.ContExp _ -> failure x
  AbsHint.Print _ expr -> failure x
  AbsHint.Printf _ expr1 expr2 expr3 string -> failure x

transItem :: Show a => AbsHint.Item' a -> Result
transItem x = case x of
  AbsHint.NoInit _ ident -> failure x
  AbsHint.Init _ ident expr -> failure x

transType :: Show a => AbsHint.Type' a -> Result
transType x = case x of
  AbsHint.Int _ -> failure x
  AbsHint.Str _ -> failure x
  AbsHint.Bool _ -> failure x
  AbsHint.Void _ -> failure x
  AbsHint.Tuple _ types -> failure x
  AbsHint.Array _ type_ -> failure x
  AbsHint.Fun _ type_ types -> failure x

transExpr :: Show a => AbsHint.Expr' a -> Result
transExpr x = case x of
  AbsHint.ETuple _ exprs -> failure x
  AbsHint.EArr _ exprs -> failure x
  AbsHint.EArrIdx _ expr1 expr2 -> failure x
  AbsHint.EVar _ ident -> failure x
  AbsHint.ELitInt _ integer -> failure x
  AbsHint.ELitTrue _ -> failure x
  AbsHint.ELitFalse _ -> failure x
  AbsHint.EApp _ ident exprs -> failure x
  AbsHint.EString _ string -> failure x
  AbsHint.EEmpty _ -> failure x
  AbsHint.EInput _ -> failure x
  AbsHint.Neg _ expr -> failure x
  AbsHint.Not _ expr -> failure x
  AbsHint.EMul _ expr1 mulop expr2 -> failure x
  AbsHint.EAdd _ expr1 addop expr2 -> failure x
  AbsHint.ERel _ expr1 relop expr2 -> failure x
  AbsHint.EAnd _ expr1 expr2 -> failure x
  AbsHint.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsHint.AddOp' a -> Result
transAddOp x = case x of
  AbsHint.Plus _ -> failure x
  AbsHint.Minus _ -> failure x

transMulOp :: Show a => AbsHint.MulOp' a -> Result
transMulOp x = case x of
  AbsHint.Times _ -> failure x
  AbsHint.Div _ -> failure x
  AbsHint.Mod _ -> failure x

transRelOp :: Show a => AbsHint.RelOp' a -> Result
transRelOp x = case x of
  AbsHint.LTH _ -> failure x
  AbsHint.LE _ -> failure x
  AbsHint.GTH _ -> failure x
  AbsHint.GE _ -> failure x
  AbsHint.EQU _ -> failure x
  AbsHint.NE _ -> failure x
